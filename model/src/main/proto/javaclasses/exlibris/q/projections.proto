//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.exlibris.q;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.quickstart";
option java_package = "javaclasses.exlibris.q";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/net/url.proto";
import "javaclasses/exlibris/values.proto";
import "javaclasses/exlibris/identifiers.proto";
import "javaclasses/exlibris/model.proto";

// *** This is projections for UI role reader ***

// Appears after click on the book’s cover like pop-up dialog window.
//
message BookDetailsView {

    // View with short book’s information.
    BookView book_view = 1;

    // The full book description.
    BookDescription book_description = 2;
}

// Consists of main book’s information.
//
message BookView {

    // The book’s cover.
    spine.net.Url book_cover_url = 1;

    // The book’s title.
    BookTitle title = 2;

    // The list of the book’s authors
    repeated Author author = 3;

    // The book can has one of the next status:
    //
    //  1. Borrowed — when book is borrowed by user.
    //  2. Reserved — when book is reserved by user.
    //  3. Available — when book is available to borrow or reserve.
    //  4. Expected soon — when book is not available now, but user can reserve it.
    //  5. Overdue — when book was borrowed by user but still doesn’t returned.
    //
    oneof book_status {
        bool borrowed = 4;
        bool reserved = 5;
        bool available = 6;
        bool expected_soon = 7;
        bool overdue = 8;
    }
}

// Dialog window with book’s information.
//
// When user scans the book to borrow or to return depending of his actions he can see next variants:
// 1. User tries to borrow book the first time -> welcome page with license confirmation.
// 2. User tries to borrow book -> success borrowing page with OK button.
// 3. User tries to borrow unavailable book -> cannot borrow book page with explanation.
// 4. User tries to return borrowed book -> successful return page.
//
message DialogWindow {

    //View with short book’s information.
    BookView book_view = 1;
}

// Represents home page. Books are sorted according to their status:
//
// 1. Overdue.
// 2. Borrowed.
// 3. Reserved.
//
// (or maybe some more sorting: for example for new "hot" books).
//
message HomePage {

    repeated Book book = 1;
    repeated Category category = 2;
}

// *** This is projections for UI role librarian ***

// View for adding book.
//
// View consist of fields for writing book details.
//
message AddBookView {

    //List of book categories.
    repeated Category categories = 1;
}

// View for editing book.
//
// View consist of fields for edit book details.
//
message UpdateBookView {

    // URL for book cover.
    spine.net.Url cover_url = 1;

    // Value that generated from decimal ISBN.
    Isbn62 isbn = 2;

    // Book’s title.
    BookTitle title = 3;

    // Full author’s name.
    repeated Author authors = 4;

    // Year of publication of the book.
    Year year = 5;

    // Categories of book.
    repeated Category categories = 6;

    // Full book’s description.
    BookDescription description = 7;
}

// View for appending inventory.
//
// The second step of wizard of adding book items.
//
message AppendInventoryView {

    // An identifier is represented by BookId.
    InventoryId inventory_id = 2;
}

//
//
//
//
message BookCompactHistory {
    spine.net.Url cover_url = 1;
    repeated LoanDetails loans = 2;
}

message LoanDetails {
    InventoryItemId inventory_item_id = 1;
    UserId user_id = 2;
    google.protobuf.Timestamp when_taken = 3;
    google.protobuf.Timestamp when_due = 4;
}

message BookFullHistory {
    spine.net.Url cover_url = 1;
    repeated InventoryItemRecord inventory_item_record = 2;
}

message InventoryItemRecord {

    InventoryItemId inventory_item_id = 1;
    oneof book_record {
        bool borrowed = 2;
        bool reserved = 3;
        bool loan_period_extended = 4;
        bool returned = 5;
        bool lost = 6;
    }
    google.protobuf.Timestamp action_date = 7;
}

message DetailsView {
    BookView book_view = 1;
    Year year = 2;
    BookDescription book_desctiption = 3;
    repeated Category categories = 4;
}

message ExtendedInventoryView {
    repeated LoanDetails loan_details = 1;
}

message InventoryDetails {
    BookTitle book_title = 1;
    repeated Author authors = 2;
    int32 availableItems = 3;
    int32 itemsSize = 4;
}

message InventoryByBookView {
    spine.net.Url url = 1;
    repeated InventoryDetails inventory_details = 2;
    repeated LoanDetails loan_details = 3;
}

message InventoryView {
    InventoryDetails inventory_details = 1;
}

// Informaton about the book that was lost.
//
message LostBook {

    // An identifier of the book that was lost.
    InventoryItemId inventory_item_id = 1;

    // A title of the book that was lost.
    BookTitle book_title = 2;

    // The list of authors.
    repeated Author authors = 3;

    // An identifier of the user who lost the book.
    UserId user_id = 4;

    // The time when was reported about book losing.
    google.protobuf.Timestamp reported_on = 5;
}

// The wiew with information about lost books.
//
message LostBookView {

    // The list of all books that were lost.
    repeated LostBook lost_books = 1;
}

// All current readers and their summary.
//
message ReadersView {

    // The list of the concrete user’s summary.
    repeated UserDetails user_details = 1;
}

// The necessary for librarian information about users.
//
message UserDetails {

    // An identifier of the user.
    UserId user_id = 1;

    // An name of user in the library.
    string username = 2;

    // The amount of borrowed by user books now.
    int32 currently_reading = 3;

    // The amount of reserved by user books now.
    int32 reservations = 4;

    // The amount of books that user return with lateness or doesn’t return at all.
    int32 orverdue = 5;
}

// Contains the information about all reservations of the current book.
//
message ReservationView {

    // An URL of the book’s cover.
    spine.net.Url cover_url = 2;

    // The details of the reservation.
    ReservationDetails reservation_details = 3;
}

// The necessary for librarian information about reservations.
//
message ReservationDetails {

    // An title of the book.
    BookTitle book_title = 1;

    // List of the book’s authors.
    repeated Author authors = 2;

    // An identifier of the user who reserved book.
    UserId user_id = 3;

    // Time when user reserved the book.
    google.protobuf.Timestamp made_on = 4;
}

// Full user history includes all user’s events.
//
// Events:
//
// 1. Borrowed.
// 2. Reserved.
// 3. Loan period extended.
// 4. Returned
// 5. Lost
//
message UserHistoryExtendedView {

    // An identifier of user.
    UserId user_id = 1;

    // Collection of all user’s actions.
    repeated InventoryItemRecord inventory_item_record = 2;
}

// Compact version of the user history.
//
// Contains all user's loan.
//
message UserHistoryView {

    // Details consist of taken on date, due on date, returned on date.
    repeated LoanDetails loan_details = 1;
}