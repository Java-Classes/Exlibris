//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.exlibris.q;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.exlibris";
option java_package = "javaclasses.exlibris.q";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/net/url.proto";
import "spine/time/time.proto";
import "spine/net/email_address.proto";
import "spine/people/person_name.proto";
import "google/protobuf/timestamp.proto";
import "javaclasses/exlibris/values.proto";
import "javaclasses/exlibris/identifiers.proto";
import "javaclasses/exlibris/q/values.proto";

// **** Projections for the UI role User. ****

// The projection state of one book from the library.
//
message BookView {

    // The identifier of a book.
    BookId book_id = 1 [(required) = true];

    // The International Standard Book Number.
    Isbn isbn = 2 [(required) = true];

    // The book title.
    BookTitle title = 3 [(required) = true];

    // Authors’ full names.
    AuthorName authors = 4 [(required) = true];

    // The book cover.
    spine.net.Url cover_url = 5;

    // The list of book categories.
    repeated Category categories = 6;

    // The book synopsis.
    BookSynopsis synopsis = 7;

    // The number of available exemplars.
    int32 available_count = 8;

    // The book status.
    BookStatus status = 9 [(required) = true];
}

// The projection state of books that are expected in the library.
//
message ExpectedSoonBooksListView {

    // The identifier of a list of books that are expected in the library.
    ExpectedSoonBooksListViewId id = 1;

    // The list of books that are expected in the library.
    repeated ExpectedSoonItem book_item = 2;
}

// The projection state of user's borrowed books.
//
message BorrowedBooksListView {

    // The identifier of a user.
    UserId user_id = 1 [(required) = true];

    // The list of user's borrowed book.
    repeated BorrowedBookItem book_item = 2;

    // A size of a list of borrowed books.
    int32 number_of_borrowed_books = 3;

    // The number of books that are overdue by the user.
    int32 number_of_overdue_books = 4;
}

// The projection state of user's reserved books.
//
message ReservedBooksListView {

    // The identifier of a user.
    UserId user_id = 1 [(required) = true];

    // The list of user's reserved book.
    repeated ReservedBookItem book_item = 2;

    // A size of a list of reserved books.
    int32 number_of_reserved_books = 3;
}

// The projection state that is shown after scanning QR code.
//
message ActionResultNotification {

    // The identifier of a user.
    UserId user_id = 1 [(required) = true];

    // The book title.
    BookTitle title = 2 [(required) = true];

    // Authors’ full names.
    AuthorName authors = 3 [(required) = true];

    // The book cover.
    spine.net.Url cover_url = 4 [(required) = true];

    // The status of an action.
    ActionStatus status = 5 [(required) = true];

    // The identifier of an inventory.
    InventoryId inventory_id = 6 [(required) = true];

    // A message that will be shown after action.
    string message = 7;

    // The date when book should be returned.
    spine.time.LocalDate due_date = 8;
}

// **** Projections for the UI role Admin. ****

// The projection state of a one reader's loan.
//
message ReaderLoanView {

    // The identifier of `ReaderLoanView` projection.
    ReaderLoanViewId id = 1 [(required) = true];

    // The identifier of a reader.
    UserId user_id = 2 [(required) = true];

    // The identifier of an inventory item.
    InventoryItemId item_id = 3 [(required) = true];

    // The book title.
    BookTitle title = 4 [(required) = true];

    // Authors’ full names.
    AuthorName authors = 5 [(required) = true];

    // The date when a book was borrowed.
    spine.time.LocalDate when_taken = 6 [(required) = true];

    // The date when a book should be returned.
    spine.time.LocalDate when_due = 7 [(required) = true];

    // The time when a book was returned.
    google.protobuf.Timestamp when_returned = 8;
}

// The projection state of one user's action.
//
// The event target identifier choise depends on the type of the event.
// For the events between a user and an inventory item - the inventory item ID is chosen.
// For the events between a user and a book - the book ID is chosen.
//
message ReaderEventLogView {

    // The identifier of `ReaderEventLogView` projection.
    ReaderEventLogViewId id = 1;

    // The identifier of a reader.
    UserId user_id = 2 [(required) = true];

    // The item could have one of the following identifiers.
    oneof event_target_id {

        // The identifier of an inventory item.
        InventoryItemId item_id = 3;

        // The identifier of a book.
        BookId book_id = 4;
    }

    // The book title.
    BookTitle title = 5 [(required) = true];

    // Authors’ full names.
    AuthorName authors = 6 [(required) = true];

    // The type of an event.
    string event_type = 7;

    // The time when an event was emitted.
    google.protobuf.Timestamp when_emitted = 8 [(required) = true];
}

// The projection state of a one lost books.
//
message LostBookView {

    // The identifier of an inventory item.
    InventoryItemId item_id = 1 [(required) = true];

    // The book title.
    BookTitle title = 2 [(required) = true];

    // Authors’ full names.
    AuthorName authors = 3 [(required) = true];

    // The name of a reader who lost.
    spine.people.PersonName user_name = 4 [(required) = true];

    // The email address of a reader who lost.
    spine.net.EmailAddress email = 5 [(required) = true];

    // The date when reported.
    spine.time.LocalDate when_reported = 6 [(required) = true];
}

//  The projection state of an inventory.
//
message BookInventoryView {

    // The identifier of an inventory.
    InventoryId inventory_id = 1 [(required) = true];

    // The book title.
    BookTitle title = 2 [(required) = true];

    // Authors' names.
    AuthorName author = 3 [(required) = true];

    // The collection of inventory items.
    repeated InventoryItemState item_state = 4;
}

// The projection state of a book details view.
//
message BookDetailsView {

    // The identifier of a book.
    BookId id = 1 [(required) = true];

    // Book details.
    BookDetails book_details = 2 [(required) = true];
}

// The projection state of a one book reservation.
//
message BookReservationView {

    // The identifier of a one book reservation.
    BookReservationViewId id = 1 [(required) = true];

    // The identifier of a book.
    BookId book_id = 2 [(required) = true];

    // The name of a reader.
    spine.people.PersonName user_name = 3 [(required) = true];

    // The email address of a reader.
    spine.net.EmailAddress email = 4 [(required) = true];

    // The time when a book was reserved.
    google.protobuf.Timestamp when_reserved = 5 [(required) = true];
}

// The projection state of a one loan.
//
message BookLoanView {

    // The identifier of a one loan view.
    BookLoanViewId id = 1;

    // The identifier of a book.
    BookId book_id = 2 [(required) = true];

    // The identifier of an inventory item.
    InventoryItemId item_id = 3 [(required) = true];

    // The name of a reader.
    spine.people.PersonName user_name = 4 [(required) = true];

    // The email address of a reader.
    spine.net.EmailAddress email = 5 [(required) = true];

    // The date when a book was borrowed.
    spine.time.LocalDate when_taken = 6 [(required) = true];

    // The date when a book should be returned.
    spine.time.LocalDate when_due = 7 [(required) = true];
}

// The projection state of a one action with book.
//
message BookEventLogView {

    // The identifier of a one action with book.
    BookEventLogViewId id = 1;

    // The identifier of a book.
    BookId book_id = 2 [(required) = true];

    // The identifier of an inventory item.
    InventoryItemId item_id = 3;

    // The name of a reader.
    spine.people.PersonName user_name = 4 [(required) = true];

    // The email address of a reader.
    spine.net.EmailAddress email = 5 [(required) = true];

    // The type of an event.
    string event_type = 6 [(required) = true];

    // The time when an event was emitted.
    google.protobuf.Timestamp when_emitted = 7 [(required) = true];
}
