//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.exlibris.q;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.quickstart";
option java_package = "javaclasses.exlibris.q";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/net/url.proto";
import "javaclasses/exlibris/values.proto";
import "javaclasses/exlibris/model.proto";
import "javaclasses/exlibris/identifiers.proto";

// *** This is projections for UI role reader ***

// Appears after click on the book cover like pop-up dialog window.
//
message BookDetailsView {

    BookView book_view = 1;
    BookDescription book_description = 2;
}

// Consists of main book information.
//
message BookView {

    spine.net.Url book_cover_url = 1;
    BookTitle title = 2;
    repeated Author author = 3;
    oneof book_status {
        bool borrowed = 4;
        bool reserved = 5;
        bool available = 6;
        bool expected_soon = 7;
        bool overdue = 8;
    }
}

// Dialog window with book information.
//
// When user scans the book to borrow or to return depending of his actions he can see next variants:
// 1. User tries to borrow book the first time -> welcome page with license confirmation.
// 2. User tries to borrow book -> success borrowing page with OK button.
// 3. User tries to borrow unavailable book -> cannot borrow book page with explanation.
// 4. User tries to return borrowed book -> successful return page.
//
message DialogWindow {

    BookView book_view = 1;
}

// Represents home page. Books are sorted according to their status:
//
// 1. Overdue.
// 2. Borrowed.
// 3. Reserved.
//
// (or maybe some more sorting: for example for new "hot" books).
//
message HomePage {

    repeated Book book = 1;
    repeated Category category = 2;
}
// *** This is projections for UI role librarian ***
// View for adding book.
//
// View consists of fields for writing book details.
//
message AddBookView {

    // List of book categories.
    repeated Category categories = 1;
}

// View for updating book.
//
// View consists of fields for edit book details.
//
message UpdateBookView {

    // URL for book cover.
    spine.net.Url url = 1;

    // Value that generated from decimal ISBN.
    Isbn62 isbn = 2;

    // Book’s title.
    BookTitle title = 3;

    // Full author’s name.
    repeated Author authors = 4;

    // Year of publication of the book.
    Year year = 5;

    // Book categories.
    repeated Category categories = 6;

    // Full book’s description.
    BookDescription description = 7;
}

// View for appending inventory.
//
// The second step of wizard of adding book items.
//
message AppendInventoryView {

    // An identifier is represented by book id.
    InventoryId inventory_id = 2;
}

// View with compact information about book’s loans.
//
// Librarian sees all users that borrow book and the loan’s period.
//
message BookCompactHistory {

    // URL for book cover.
    spine.net.Url url = 1;

    // List of user's loan details.
    repeated LoanDetails loans = 2;
}

// View with information about book’s loan.
//
// View consists of fields with inventory item,
// users who borrowed the book and their taken on and due on dates.
//
message LoanDetails {

    // An identifier of a book. Contains ISBN base62 and number that inputted by librarian.
    InventoryItemId inventory_item_id = 1;

    // An identifier is represented by User email address.
    UserId user_id = 2;

    // The time when book was borrowed.
    google.protobuf.Timestamp when_taken = 3;

    // The time when book should be returned.
    google.protobuf.Timestamp when_due = 4;
}

// View with full information about book’s record.
//
// Librarian sees all users that borrow book,
// reserve, lost, return, or extend loan period with date of every record.
//
message BookFullHistory {

    // URL for book cover.
    spine.net.Url url = 1;

    // List of inventory item record.
    repeated InventoryItemRecord inventory_item_record = 2;
}

// View with information about inventory item record.
//
// View consists of fields about inventory item, actions and action date.
//
message InventoryItemRecord {

    // An identifier is represented by book id and item number.
    InventoryItemId inventory_item_id = 1;

    // One of the actions is assigned to the inventory item.
    oneof book_record {
        bool borrowed = 2;
        bool reserved = 3;
        bool loan_period_extended = 4;
        bool returned = 5;
        bool lost = 6;
    }

    // The time when the action was did.
    google.protobuf.Timestamp action_date = 7;
}

// Details about book.
//
// View consists of all information about book.
// URL cover, book title, authors, isbn, year of publication,
// categories, book desctiption.
//
message DetailsView {

    // URL for book cover.
    spine.net.Url url = 1;

    // Book’s title.
    BookTitle title = 2;

    // Full author’s name.
    repeated Author authors = 3;

    // Value that generated from decimal ISBN.
    Isbn62 isbn = 4;

    // Year of publication of the book.
    Year year = 5;

    // List of categories.
    repeated Category categories = 6;

    // Full book’s description.
    BookDescription book_desctiption = 7;
}

// View contains a book loan in inventory.
//
// View consists of fields with information about inventory items,
// users who borrowed the book and their taken on and due on dates.
//
message ExtendedInventoryView {

    // List with information about book’s loan.
    repeated LoanDetails loan_details = 1;
}

// Details about inventory.
//
// View consists of fields with book title, authors,
// available books, amount of overdue books.
//
message InventoryDetails {

    // Book’s title.
    BookTitle book_title = 1;

    // Full author’s name.
    repeated Author authors = 2;

    // Amount of available books.
    int32 available_items = 3;

    // Amount of books.
    int32 items_size = 4;

    // Amount of overdue books.
    int32 overdue = 5;
}

// Inventory state of the current book.
//
// View consists of book cover and loan details.
//
message InventoryByBookView {

    // URL for book cover.
    spine.net.Url url = 1;

    // Information about book’s loan.
    repeated LoanDetails loan_details = 3;
}

// View with information about inventory.
//
// View consists of fields with book title, authors,
// available books, amount of overdue book.
//
message InventoryView {

    // Inventory details.
    InventoryDetails inventory_details = 1;
}

message LostBook {
    InventoryItemId inventory_item_id = 1;
    BookTitle book_title = 2;
    repeated Author authors = 3;
    UserId user_id = 4;
    google.protobuf.Timestamp reported_on = 5;
}

message LostBookView {
    repeated LostBook lost_books = 1;
}

message ReadersView {
    repeated UserDetails user_details = 1;
}

message UserDetails {
    UserId user_id = 1;
    string username = 2;
    int32 currently_reading = 3;
    int32 reservations = 4;
    int32 orverdue = 5;
}

message ReservationView {
    spine.net.Url url = 1;
    ReservationDetails reservation_details = 2;
}

message ReservationDetails {
    BookTitle book_title = 1;
    repeated Author authors = 2;
    UserId user_id = 3;
    google.protobuf.Timestamp made_on = 4;
}

message UserHistoryExtendedView {
    UserId user_id = 1;
    repeated InventoryItemRecord inventory_item_record = 2;
}

message UserHistoryView {
    repeated LoanDetails loan_details = 1;
}
