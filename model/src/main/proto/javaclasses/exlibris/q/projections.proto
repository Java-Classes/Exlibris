//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.exlibris.q;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.exlibris";
option java_package = "javaclasses.exlibris.q";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/net/url.proto";
import "javaclasses/exlibris/values.proto";
import "javaclasses/exlibris/identifiers.proto";
import "javaclasses/exlibris/q/values.proto";

// **** Projections for the UI role User. ****

// The projection state of all books in the library.
//
message AllBooksListView {

    // The identifier of a list of all books.
    ListViewId id = 1;

    // The list of all books in the library.
    repeated BookItem book_item = 2;
}

// The projection state of books that are expected in the library.
//
message ExpectedSoonBooksListView {

    // The identifier of a list of books that are expected in the library.
    ListViewId id = 1;

    // The list of books that are expected in the library.
    repeated ExpectedSoonItem book_item = 2;
}

// The projection state of user's borrowed books.
//
message BorrowedBooksListView {

    // The identifier of a user.
    UserId user_id = 1;

    // The list of user's borrowed book.
    repeated BorrowedBookItem book_item = 2;
}

// The projection state of user's reserved books.
//
message ReservedBooksListView {

    // The identifier of a user.
    UserId user_id = 1;

    // The list of user's reserved book.
    repeated ReservedBookItem book_item = 2;
}

// **** Projections for the UI role Admin. ****

// The projection state of a readers list view.
//
message ReadersListView {

    // The identifier of a list of library readers.
    ListViewId id = 1;

    // The collection of all library readers with books count.
    repeated ReaderBooksCountItem reader = 2;
}

// The projection state of a reader's history view.
//
// Includes the reader's event log for the full history view
// and the reader's loans list for the compact history view.
//
// Sorting:
//
//     // most recent on top;
//
message ReaderHistoryView {

    // The identifier of a reader.
    UserId user_id = 1;

    // The collection of all reader's loans.
    repeated ReaderLoanItem loan = 2;

    // The collection of all reader's events.
    repeated ReaderEventLogItem event = 3;
}

// The projection state of a lost books list view.
//
// Sorting:
//
//     // most recent on top;
//
message LostBooksListView {

    // The identifier of a list of lost books.
    ListViewId id = 1;

    // The collection of all library lost books.
    repeated LostBookItem lost_book = 2;
}

// The projection state of an inventory list view.
//
// Sorting:
//
//     // with overdue loans on top;
//     // by title alphabetically;
//
message InventoryListView {

    // The identifier of a inventory list.
    ListViewId id = 1;

    // The collection of all library book inventory.
    repeated BookInventory inventory = 2;
}

// The projection state of a book.
//
message BookDetailsView {

    // The identifier of a book.
    BookId id = 1;

    // Book details.
    BookDetails book_details = 2;
}

// The projection state of a book inventory.
//
// Sorting:
//
//     // with overdue loan on top;
//
message BookInventoryView {

    // The identifier of a book.
    BookId id = 1;

    // The collection of inventory items.
    repeated InventoryItemFullState item_state = 2;
}

// The projection state of a book reservations.
//
// Sorting:
//
//     // most recent on top;
//
message BookReservationsView {

    // The identifier of a book.
    BookId id = 1;

    // The collection of book reservations.
    repeated ReservationItem reservation = 2;
}

// The projection state of a book history.
//
// Sorting:
//
//     // most recent on top;
//
message BookHistoryView {

    // The identifier of a book.
    BookId id = 1;

    // The collection of all book loans.
    repeated BookLoanItem reservation = 2;

    // The collection of all book events.
    repeated BookEventLogItem event = 3;
}
