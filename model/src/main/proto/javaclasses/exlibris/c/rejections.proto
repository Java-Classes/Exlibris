//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.exlibris.c;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.exlibris";
option java_package = "io.javaclasses.exlibris.c.rejection";
option java_outer_classname = "RejectionsProto";
option java_multiple_files = false;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "javaclasses/exlibris/identifiers.proto";

// Rejection when librarian tries to add existing book.
//
message BookAlreadyExists {

    // An identifier of the book.
    BookId book_id = 1;

    // Librarian who tried to add book.
    UserId user_id = 2;

    // Time when librarian tried to add existing book.
    google.protobuf.Timestamp when_rejected = 3;
}

// Rejection when librarian tries to remove missing book.
//
message CannotRemoveMissingBook {

    // An identifier of the book.
    BookId book_id = 1;

    // Librarian who tried to remove book.
    UserId user_id = 2;

    // Time when librarian tried to remove missing book.
    google.protobuf.Timestamp when_rejected = 3;
}

// Rejection when librarian tries to update missing book.
//
message CannotUpdateMissingBook {

    // An identifier of the book.
    BookId book_id = 1;

    // Librarian who tried to update book.
    UserId librarian_id = 2;

    // Time when librarian tried to update missing book.
    google.protobuf.Timestamp when_rejected = 3;
}

// Rejection when user tries to borrow either the book that borrowed by himself
// or there are no available items.
//
message CannotBorrowBook {

    // An identifier of the inventory.
    InventoryId inventory_id = 1;

    // Item that user tried to borrow.
    InventoryItemId inventory_item_id = 2;

    // User who tried to borrow book.
    UserId user_id = 3;

    // Time when user tried to borrow book.
    google.protobuf.Timestamp when_rejected = 4;

    // Reason why book cannot be borrowed.
    oneof cannot_borrow_reason {
        bool already_borrowed = 5;
        bool no_available_items = 6;
    }
}

// Rejection when user tries to reserve borrowed or already reserved book.
//
message CannotReserveBook {

    // An identifier of the inventory.
    InventoryId inventory_id = 1;

    // User who tried to reserve book.
    UserId user_id = 2;

    // Time when user tried to borrow book.
    google.protobuf.Timestamp when_rejected = 3;

    // Reason why book cannot be reserved.
    oneof cannot_reserve_reason {
        bool borrowed = 4;
        bool already_reserved = 5;
    }
}

// Rejection when user tries to extend loan period, if the book is already reserved by another user.
//
message CannotExtendLoanPeriod {

    // An identifier of the inventory.
    InventoryId inventory_id = 1;

    // Loan identifier.
    LoanId loan_id = 2;

    // User who tried to extend loan period.
    UserId user_id = 3;

    // Time when user tried to extend loan period.
    google.protobuf.Timestamp when_rejected = 4;
}

// Rejection when user tries to return non-borrowed book.
//
message CannotReturnNonBorrowedBook {

    // An identifier of the inventory.
    InventoryId inventory_id = 1;

    // Item that user tried to return.
    InventoryItemId inventory_item_id = 2;

    // User who tried to to return book.
    UserId user_id = 3;

    // Time when user tried to return book.
    google.protobuf.Timestamp when_rejected = 4;
}

// Rejection when user tries to return the missing `InventoryItem`.
//
message CannotReturnMissingBook {

    // An identifier of the inventory.
    InventoryId inventory_id = 1;

    // Item that user tried to return.
    InventoryItemId inventory_item_id = 2;

    // User who tried to return book.
    UserId user_id = 3;

    // Time when user tried to return book.
    google.protobuf.Timestamp when_rejected = 4;
}

// Rejection when user tries to cancel missing reservation.
//
message CannotCancelMissingReservation {

    // An identifier of the inventory.
    InventoryId inventory_id = 1;

    // User who tried to cancel reservation.
    UserId user_id = 2;

    // Time when user tried to cancel reservation.
    google.protobuf.Timestamp when_rejected = 3;
}

// Rejection when librarian tries to write missing book off.
//
message CannotWriteMissingBookOff {

    // An identifier of the inventory.
    InventoryId inventory_id = 1;

    // Librarian who tried to write missing book off.
    UserId librarian_id = 2;

    // Inventory item identifier.
    InventoryItemId inventory_item_id = 3;

    // Time when user tried to write missing book off.
    google.protobuf.Timestamp when_rejected = 4;
}
