//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.exlibris.c;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.exlibris";
option java_package = "javaclasses.exlibris.c";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/time/time.proto";
import "javaclasses/exlibris/identifiers.proto";
import "javaclasses/exlibris/values.proto";
import "google/protobuf/timestamp.proto";

// The event fired when a librarian adds new `Book` to a library.
//
message InventoryCreated {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // When inventory was created.
    google.protobuf.Timestamp when_created = 2 [(required) = true];
}

// The event fired when a librarian adds a new item to an inventory.
//
// An appended book becomes:
// 1. Available (if there is no reservations for this book).
// 2. Ready to pickup (for someone who reserved it).
//
message InventoryAppended {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The newly created item.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // Who appended.
    UserId librarian_id = 3 [(required) = true];

    // When an inventory was appended.
    google.protobuf.Timestamp when_appended = 4 [(required) = true];
}

// The event fired when a librarian adds a new item to an inventory and the QR generation
// process manager provides the added inventory item with QR code and the recognize token.
//
message QRCodeSet {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of an item.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // The URL of a QR code image.
    QRCodeImageURL qr_image_url = 3 [(required) = true];

    // The hashed part of the URL to recognize an inventory item.
    InventoryItemRecognizeToken recognize_token = 4 [(required) = true];

    // When a QR code was set.
    google.protobuf.Timestamp when_set = 5 [(required) = true];
}

// The event appears when either an inventory appended, a book returned and there is no reservation,
// a ready to pick up reservation was canceled and there are no more unsatisfied reservations.
//
// A book becomes public available.
//
message BookBecameAvailable {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The number of public available books.
    int32 available_books_count = 2;

    // When book became available.
    google.protobuf.Timestamp when_became_available = 3 [(required) = true];
}

// An event fired when a book is available for a user to take it.
//
// Appears when an inventory appended or a book returned or someone canceles his reservation.
//
// In 2 days this opportunity disappears and a reservation expires.
//
message BookReadyToPickup {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // Who can take this book during 2 days.
    UserId for_whom = 2 [(required) = true];

    // When a book became ready to pickup.
    google.protobuf.Timestamp when_became_ready_to_pickup = 3 [(required) = true];

    // The pickup deadline of a book.
    google.protobuf.Timestamp pick_up_deadline = 4 [(required) = true];
}

// An event fired when a user reserves a book.
//
message ReservationAdded {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // Who reserved a book.
    UserId for_whom_reserved = 2 [(required) = true];

    // The estimated time when the book becomes ready to pick up.
    google.protobuf.Timestamp when_expected = 3;

    // The time when the reservation was added.
    google.protobuf.Timestamp when_created = 4 [(required) = true];
}

// An event fired when a user borrows a book.
//
// Triggers 'reservation became loan' if the book was reserved.
//
message BookBorrowed {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of an item.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // Who borrowed a book.
    UserId who_borrowed = 3 [(required) = true];

    // The loan idenifier.
    LoanId loan_id = 4 [(required) = true];

    // The number of public available books.
    int32 available_books_count = 5;

    // The time when user borrowed a book.
    google.protobuf.Timestamp when_borrowed = 6 [(required) = true];

    // The time when the loan becomes overdue.
    google.protobuf.Timestamp when_due = 7 [(required) = true];
}

// An event when a reservation was successfully finished.
//
message ReservationBecameLoan {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // Whose reservation became a loan.
    UserId user_id = 2 [(required) = true];

    // Time when a reservation became a loan.
    google.protobuf.Timestamp when_became_loan = 3 [(required) = true];
}

// An event fired when a user's loan period is overdue.
//
message LoanBecameOverdue {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of an item.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // The loan owner.
    UserId user_id = 3 [(required) = true];

    // The identifier of a loan.
    LoanId loan_id = 4 [(required) = true];

    // Shows whether it is allowed to extend loan period.
    //
    // Depends on the state of the reservations query in the inventory aggregate.
    //
    bool is_allowed_extension = 5;

    // The time when a loan became overdue.
    google.protobuf.Timestamp when_became_overdue = 6 [(required) = true];
}

// An event fired when a user's loan period time runs out.
//
message LoanBecameShouldReturnSoon {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of an item.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // The loan owner.
    UserId user_id = 3 [(required) = true];

    // The identifier of a loan.
    LoanId loan_id = 4 [(required) = true];

    // Shows whether it is allowed to extend loan period.
    //
    // Depends on the state of the reservations query in the inventory aggregate.
    //
    bool is_allowed_extension = 5;

    // The time when a loan became should return soon.
    google.protobuf.Timestamp when_became_should_return_soon = 6 [(required) = true];
}

// An event fired when user successfully extended his loan period.
//
message LoanPeriodExtended {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of a loan.
    LoanId loan_id = 2 [(required) = true];

    // Who extended.
    UserId user_id = 3 [(required) = true];

    // The identifier of an item.
    InventoryItemId inventory_item_id = 4 [(required) = true];

    // The timestamp of a previous due date.
    google.protobuf.Timestamp previous_due_date = 5 [(required) = true];

    // The timestamp of a new due date.
    google.protobuf.Timestamp new_due_date = 6 [(required) = true];

    // The time when a loan period was extended.
    google.protobuf.Timestamp when_extended = 7 [(required) = true];
}

// An event fired when the book was reserved and this reservation was the first in the list.
//
// All recent loans of the specified book become not allowed for extension.
//
message LoansExtensionForbidden {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The collection of users' identifiers whos loans became not allowed for an extension.
    repeated UserId borrowers = 2 [(required) = true];

    // The time when became not allowed.
    google.protobuf.Timestamp when_became = 3 [(required) = true];
}

// An event fired when the book reservations become satisfied or canceled
// and there are no more active reservations for this book.
//
// All recent loans of the specified book become allowed for extension.
//
message LoansExtensionAllowed {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The collection of users' identifiers whos loans became allowed for an extension.
    repeated UserId borrowers = 2 [(required) = true];

    // The time when became allowed.
    google.protobuf.Timestamp when_became = 3 [(required) = true];
}

// An event fired when a user returns a book.
//
// User's loan is finished and the book becomes:
// 1. Available (if there is no reservations for this book).
// 2. Ready to pickup (for someone who reserved it).
//
message BookReturned {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of an item in inventory.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // Who returned a book.
    UserId who_returned = 3 [(required) = true];

    // The loan idenifier.
    LoanId loan_id = 4 [(required) = true];

    // The timestamp when user returned a book.
    google.protobuf.Timestamp when_returned = 5 [(required) = true];
}

// An event fired when an user lost a borrowed book.
//
message BookLost {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of an inventory item.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // Who lost a book.
    UserId who_lost = 3 [(required) = true];

    // The timestamp when an user reported that he had lost a book.
    google.protobuf.Timestamp when_reported = 4 [(required) = true];
}

// An event fired when user or system cancel a reservation.
//
// Can be canceled for these reasons:
// 1. User canceled reservation. In this case `whoCanceled` is an identifier of a user.
// 2. System cancel reservation because `Book` is removed. In this case `whoCanceled` is `botId`.
//
message ReservationCanceled {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // User who canceled a reservation.
    UserId who_canceled = 2 [(required) = true];

    // The time when user canceled a reservation.
    google.protobuf.Timestamp when_canceled = 3 [(required) = true];

    // Shows whether the canceled reservation was satisfied or not.
    bool was_satisfied = 4;
}

// An event fired when a librarian decreases a current inventory.
//
// Will cancel all reservations if it is the last one in current inventory.
//
message InventoryDecreased {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The identifier of an item.
    InventoryItemId inventory_item_id = 2 [(required) = true];

    // The librarian who decreased an inventory.
    UserId librarian_id = 3 [(required) = true];

    // The time when inventory was decreased.
    google.protobuf.Timestamp when_decreased = 4 [(required) = true];

    // The number of public available books.
    int32 available_books_count = 5;

    // A book can be lost or outdated.
    WriteOffReason write_off_reason = 6 [(required) = true];
}

// An event fired when user had 2 days to take the book but he didn't.
//
message ReservationPickUpPeriodExpired {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // Whose pickup period expired.
    UserId user_id = 2 [(required) = true];

    // The time when pickup period expired.
    google.protobuf.Timestamp when_expired = 3 [(required) = true];
}

// An event fired when librarian removes `Book` from a library.
//
message InventoryRemoved {

    // The identifier of an inventory.
    InventoryId inventory_id = 1;

    // The time when inventory was removed.
    google.protobuf.Timestamp when_removed = 2 [(required) = true];
}

// An event fired when librarian adds new `Book` to a library.
//
// Should trigger a react in `Inventory`.
//
message BookAdded {

    // The identifier of a book.
    BookId book_id = 1;

    // Book details.
    BookDetails details = 2 [(required) = true];

    // Who added a book.
    UserId librarian_id = 3 [(required) = true];

    // The time when book was added.
    google.protobuf.Timestamp when_added = 4 [(required) = true];
}

// An event when librarian changes incorrect info about `Book`.
//
message BookUpdated {

    // The identifier of a book.
    BookId book_id = 1;

    // Details of a current book.
    BookDetailsChange book_details_change = 2 [(required) = true];

    // Who updated a book.
    UserId librarian_id = 3 [(required) = true];

    // The time when book was updated.
    google.protobuf.Timestamp when_updated = 4 [(required) = true];
}

// An event fired when librarian removes book from a library.
//
// Impossible when at least one user borrowed it.
//
// Also deletes inventory of this book.
//
message BookRemoved {

    // The identifier of a book.
    BookId book_id = 1;

    // Who removes a book.
    UserId librarian_id = 2 [(required) = true];

    // The reason of removing book.
    //
    // Book could be removed with one of the following reasons:
    // 1. Book is outdated.
    // 2. Custom reason which is described by librarian.
    oneof book_removal_reason {
        bool outdated = 3;
        string custom_reason = 4;
    }

    // The time when book was removed.
    google.protobuf.Timestamp when_removed = 5 [(required) = true];
}
