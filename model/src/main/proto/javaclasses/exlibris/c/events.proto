/*
 * Copyright 2017, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package javaclasses.exlibris.c;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.quickstart";
option java_package = "javaclasses.exlibris.c";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "javaclasses/exlibris/identifiers.proto";
import "javaclasses/exlibris/values.proto";
import "google/protobuf/timestamp.proto";

//An event when librarian add new book to the library.
//
//React on BookAdded
//
message InventoryCreated {
    //    The same as the bookId.
    InventoryId inventory_id = 1;
    google.protobuf.Timestamp when_created = 2;
}

// An event fired when librarian add new items to inventory.
//
//Appended book becomes or ready to pickup for the user who borrowed it or available.
message InventoryAppended {
    InventoryId inventoryId = 1;
    //Identifier of the new created item.
    InventoryItemId inventoryItemId = 2;

    //Optional field: exists when book has RFID mark.
    RFID rfid = 3;
    //Librarian who appended.
    UserId librarian_id = 4;
    google.protobuf.Timestamp when_appended = 5;
}

//Event appears when either inventory appended or book returned and there is no reservation.
//Book becomes public available.
message BookBecameAvailable {

    InventoryId inventory_id = 1;
    //Identifier of the invetory item which became available.
    InventoryItemId inventory_item_id = 2;
    google.protobuf.Timestamp when_became_available = 3;
}

//An event when  book is available for 1 user to take it.
//
//Appears when either inventory appended or book returned.
//
//In 2 days this opportunity disappear and the reservation expires.
message BookReadyToPickup {
    InventoryId inventory_id = 1;
    //Identifier of the invetory item which became ready to pickup.
    InventoryItemId inventory_item_id = 2;
    //User who can take this book during 2 days.
    UserId for_whom = 3;
    google.protobuf.Timestamp when_became_ready_to_pickup = 4;
    google.protobuf.Timestamp pick_up_deadline = 5;
}
//
//An event when user reserve the book.
//
//If a queue on book exists then reader will be added to the queue.
//Else if book is available then reader has 2 days to borrow book.
message ReservationAdded {
    InventoryId inventory_id = 1;
    UserId for_whom_reserved = 2;
    google.protobuf.Timestamp when_created = 3;
}

//Event when user borrows book.
//
//Triggers 'reservation became loan' if the book was reserved.
message BookBorrowed {
    InventoryId inventory_id = 1;
    InventoryItemId inventory_item_id = 2;
    UserId who_borrowed = 3;
    google.protobuf.Timestamp when_borrowed = 4;
}

//An event when the reservation was successfully finished.
message ReservationBecameLoan {
    InventoryId inventory_id = 1;
    //User whose reservation became loan.
    UserId user_id = 2;
    google.protobuf.Timestamp when_became_loan = 3;
}

//An event fired when user's loan period is overdue.
message LoanBecameOverdue {

    InventoryId inventory_id = 1;
    LoanId loan_id = 2;

    //Date when book was expected, so overdue period can be calculated.
    google.protobuf.Timestamp when_overdue = 3;
}

//An event when user tried to extend his loan period and this attempt was successful.
//
//Impossible when book is reserved by another user.
message LoanPeriodExtended {

    InventoryId inventory_id = 1;
    LoanId loan_id = 2;
    google.protobuf.Timestamp previous_due_date = 3;
    google.protobuf.Timestamp new_due_date = 4;
}

//An event when user returns book.
//
//User's loan is finished and the book becomes or ready to pickup or available.
message BookReturned {
    InventoryId inventory_id = 1;
    InventoryItemId inventory_item_id = 2;
    UserId who_returned = 3;
    google.protobuf.Timestamp when_returned = 4;
}

//An event when user lost borrowed book.
//
//User can report by his own that he lost the book or librarian can do the same action.
message BookLost {
    InventoryId inventory_id = 1;
    InventoryItemId inventory_item_id = 2;
    UserId whoLost = 3;
    google.protobuf.Timestamp whenLost = 4;
}

//An event fired when user or system cancel the reservation.
//
//Can be canceled for these reasons:
//1)User canceled reservation. In this case whoCanceled is id of reader.
//2)System cancel reservation because book is removed. In this case whoCanceled is botId.
message ReservationCanceled {

    InventoryId inventory_id = 1;
    UserId who_canceled = 2;
    google.protobuf.Timestamp when_canceled = 3;

}

//An event when librarian decrease current inventory.
//
//Can cancel reservation if it is the last one in current inventory.
message InventoryDecreased {
    InventoryId inventory_id = 1;
    InventoryItemId inventory_item_id = 2;
    //Librarian who decreased the inventory.
    UserId librarian_id = 3;
    google.protobuf.Timestamp when_decreased = 4;

    //    Book can be lost or outdated.
    oneof write_off_reason {
        bool lost = 5;
        bool outdated = 6;
        string custom_reason = 7;
    }
}

//An event when user had 2 days to take the book but he didn't.
message ReservationPickUpPeriodExpired {

    InventoryId inventory_id = 1;
    UserId user_id = 2;
    google.protobuf.Timestamp when_expired = 3;
}

//An event fired when librarian remove book from the library.
//
//React on BookRemove.
message InventoryRemoved {
    InventoryId inventory_id = 1;
    google.protobuf.Timestamp when_removed = 2;
}