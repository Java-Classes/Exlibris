/*
 * Copyright 2017, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package javaclasses.exlibris.c;

import "spine/options.proto";
import "javaclasses/exlibris/values.proto";

option (type_url_prefix) = "type.spine.quickstart";
option java_package = "javaclasses.exlibris.c";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "javaclasses/exlibris/identifiers.proto";
import "google/protobuf/timestamp.proto";

// An attempt to create the new book.
//
// In case of a successful command propagation, the book is added.
// not be applied to the existing book.
//
message AddBook {

    // ID of a book to create.
    //
    BookId book_id = 1;

    // A details for the new book.
    //
    BookDetails book_details = 2;
}

// An attempt to update the book.
//
// In case of a successful command propagation, the book is updated.
// Cannot be applied to the missing book.
//
message UpdateBook {

    // ID of a book to create.
    //
    BookId book_id = 1;

    // A new details for the existed book.
    //
    BookDetails book_details = 2;
}

// An attempt to remove the book.
//
// In case of a successful command propagation, the book is removed.
// Cannot be applied to the missing book.
//
message RemoveBook {

    BookId bok_id = 1;
    oneof book_removal_reason {
        bool lost = 2;
        bool outDated = 3;
        string custom_reason = 4;
    }
    google.protobuf.Timestamp when_removed = 5;
}

// Append item to the book inventory.
// In case of a successful command propagation,
// appended book becomes available or ready to pickup for the user who borrowed it.
//
message AppendInventory {

    // An identifier of a inventory.
    InventoryId intentory_id = 1;

    // An identifier of a inventory item.
    InventoryItemId inventoryItem_id = 2;

    // Optional field: exists when book has RFID mark.
    RFID rfid = 3;
}

// An attempt to borrow a book.
//
// In case of a successful command propagation, the book is borrowed by reader.
// If book was reserved, then `Reservation` became `Loan`.
//
// Cannot be applied to the book that is reserved by another user.
//
message BorrowBook {

    // An identifier of an inventory item.
    InventoryItemId intentoryItem_id = 1;

    // An identifier of the user, who borrows the book.
    UserId user_id = 2;
}


// An attempt to reserve the book.
//
// In case of a successful command propagation, the book is reserved.
// Cannot be applied if the book has already borrowed or reserved by current reader.
//
message ReserveBook {

    // An identifier of an inventory.
    InventoryId intentory_id = 1;

    // An identifier of the user, who reserves the book.
    UserId user_id = 2;
}

// An attempt to cancel the reservation.
//
// In case of a successful command propagation, the reservation is canceled.
// Cannot be applied to the missing reservation.
//
message CancelReservation {

    // An identifier of an inventory.
    InventoryId intentory_id = 1;

    // An identifier of the user, who cancels the book reservation.
    UserId user_id = 2;
}

// An attempt to extend the loan period.
//
// In case of a successful command propagation, the loan period is extended.
// Cannot be applied if the book has been reserved by another user.
//
message ExtendLoanPeriod {

    // An identifier of loan period.
    LoanId loan_id = 1;

    // New due date of loan.
    google.protobuf.Timestamp newDueDate = 2;
}

// Loan period marks overdue if the reader hasn't return the book in time.
//
message MarkLoanOverdue {

    // An identifier of loan period.
    LoanId loan_id = 1;
}

// Reservation expires if the reader hasn't taken the book in 2 days.
//
message MarkReservationExpired {

    // An identifier of an inventory.
    InventoryId intentory_id = 1;

    // An identifier of the user, whose book reservation expires.
    UserId user_id = 2;
}

// An attempt to return the book.
//
// In case of a successful command propagation, the book is returned.
// Cannot be applied to the missing or not borrowed book.
//
message ReturnBook {

    // An identifier of an inventory.
    InventoryId intentory_id = 1;

    // An identifier of an inventory item.
    InventoryItemId inventoryItem_id = 2;

    // An identifier of the user, who returns the book.
    UserId user_id = 3;
}

// An attempt to report the lost book.
//
// In case of a successful command propagation, the book is reported as lost.
//
message ReportLostBook {

    // An identifier of an inventory item.
    InventoryItemId inventoryItem_id = 1;

    // An identifier of the user, who has lost the book.
    UserId whoLost = 2;
}

// An attempt to write off the book.
//
// In case of a successful command propagation, the book is written off.
// Cannot be applied to the missing book.
//
message WriteBookOf {

    // An identifier of an inventory item.
    InventoryItemId inventoryItem_id = 1;

    // Reasons for write book off.
    oneof reason {
        bool lost = 2;
        bool outDated = 3;
        string custom_reason = 4;
    }
}
